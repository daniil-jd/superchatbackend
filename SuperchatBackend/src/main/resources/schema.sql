create schema IF NOT EXISTS ITPARK
;

create table IF NOT EXISTS CHAT_USER
(
	ID BIGINT default (NEXT VALUE FOR ITPARK.SYSTEM_SEQUENCE_440CB455_B59D_4DE7_9BAE_DC14B307B3D2)
		primary key,
	ACCOUNT_NON_EXPIRED BOOLEAN not null,
	ACCOUNT_NON_LOCKED BOOLEAN not null,
	CREDENTIALS_NON_EXPIRED BOOLEAN not null,
	ENABLED BOOLEAN not null,
	NAME VARCHAR(255),
	PASSWORD VARCHAR(255) not null,
	USERNAME VARCHAR(255) not null,
	CREATED TIMESTAMP(26,6) default CURRENT_TIMESTAMP() not null
)
;
drop table if EXISTS ITPARK.AUTHENTICATION_TOKEN
;
create table IF NOT EXISTS AUTHENTICATION_TOKEN
(
	TOKEN VARCHAR(255) not null
		primary key,
	USER_ID BIGINT not null,
	constraint FKE62X5RDJYL2R2G5RSN9NCHYA6
		foreign key (USER_ID) references CHAT_USER
)
;

create table IF NOT EXISTS CHAT_ROOM
(
	ID BIGINT default (NEXT VALUE FOR ITPARK.SYSTEM_SEQUENCE_5317E02D_06ED_4D82_A9D6_BB37E198D361)
		primary key,
	ICON VARCHAR(255),
	NAME VARCHAR(255),
	CREATOR_ID BIGINT not null,
	constraint FKKGSDC7A1TCP9CUJ5AUL58CTWK
		foreign key (CREATOR_ID) references CHAT_USER
)
;

create table IF NOT EXISTS CHAT_MESSAGE
(
	ID BIGINT default (NEXT VALUE FOR ITPARK.SYSTEM_SEQUENCE_30F42FEA_D562_492B_88D5_FD320BB2A579)
		primary key,
	CONTENT VARCHAR(255),
	CREATED TIMESTAMP(26,6),
	STATUS INTEGER,
	AUTHOR_ID BIGINT,
	ROOM_ID BIGINT,
	constraint FK8KVONFSQJ2LWEW0QQOPGCQR6A
		foreign key (AUTHOR_ID) references CHAT_USER,
	constraint FKFVBC4WVHK51Y0QTNJRBMINXFU
		foreign key (ROOM_ID) references CHAT_ROOM
)
;

create table IF NOT EXISTS CHAT_ROOM_USERS
(
	ROOM_ENTITY_ID BIGINT not null,
	USERS_ID BIGINT not null,
	constraint FKDHRR4WX28G9BGAOKOEGKCYI0A
		foreign key (USERS_ID) references CHAT_USER,
	constraint FKJS12K30LK3E54S7OCNA6A2O5E
		foreign key (ROOM_ENTITY_ID) references CHAT_ROOM
)
;

create unique index PRIMARY_KEY_B
	on CHAT_USER (ID)
;

drop table IF EXISTS ITPARK.REGISTRATION_TOKEN
;

create table IF NOT EXISTS REGISTRATION_TOKEN
(
	TOKEN VARCHAR(255) not null
		primary key,
	CREATED TIMESTAMP(26,6),
	USER_ID BIGINT,
	constraint FKKQL4OSTF6F4PPQQO40HETXFXU
		foreign key (USER_ID) references CHAT_USER
)
;

create table IF NOT EXISTS USER_ENTITY_AUTHORITIES
(
	USER_ENTITY_ID BIGINT not null
		references CHAT_USER
			on delete cascade,
	AUTHORITIES binary(255),
	constraint FKNUSXUAF3QQ0JWQYNLT9ONKK1M
		foreign key (USER_ENTITY_ID) references CHAT_USER
)
;

-- drop table IF EXISTS itpark.authentication_token
-- create table itpark.authentication_token (token varchar(255) not null, user_id bigint not null, primary key (token))
-- create table IF NOT EXISTS itpark.chat_message (id bigint generated by default as identity, content varchar(255), created timestamp, status integer, author_id bigint, room_id bigint, primary key (id))
-- drop table IF EXISTS itpark.registration_token
-- create table itpark.registration_token (token varchar(255) not null, created timestamp, user_id bigint, primary key (token))
-- create table IF NOT EXISTS itpark.chat_room (id bigint generated by default as identity, icon varchar(255), name varchar(255), creator_id bigint  not null, primary key (id))
-- create table IF NOT EXISTS itpark.chat_user (id bigint generated by default as identity, account_non_expired boolean not null, account_non_locked boolean not null, credentials_non_expired boolean not null, enabled boolean not null, name varchar(255), password varchar(255) not null, username varchar(255) not null, primary key (id))
-- create table IF NOT EXISTS itpark.user_entity_authorities (user_entity_id bigint not null, authorities binary(255), foreign key (user_entity_id) references chat_user(id) ON DELETE CASCADE)